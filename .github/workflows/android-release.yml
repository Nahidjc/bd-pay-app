name: React Native Android Release
on:
  push:
    branches:
      - master  # or 'main' depending on your default branch name
  workflow_dispatch:  # Allow manual trigger

env:
  JAVA_VERSION: '11'
  NODE_VERSION: '18'
  GRADLE_VERSION: '7.5.1'

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Get version info
        id: get_version
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Calculate version code (MAJOR * 10000 + MINOR * 100 + PATCH)
          VERSION_CODE=$(echo $VERSION | awk -F. '{printf "%d%02d%02d", $1,$2,$3}')
          
          # Get commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          
          # Check if this version already exists as a tag
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "::error::Version v$VERSION already exists as a tag"
            exit 1
          fi

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn cache clean

      - name: Update Android version
        working-directory: android
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          VERSION_CODE="${{ steps.get_version.outputs.version_code }}"
          
          # Backup build.gradle
          cp app/build.gradle app/build.gradle.bak
          
          # Update version code and name
          sed -i -E "s/(versionCode[[:space:]]+)[0-9]+/\1$VERSION_CODE/" app/build.gradle
          sed -i -E "s/(versionName[[:space:]]+)\"[^\"]+\"/\1\"$VERSION\"/" app/build.gradle
          
          # Verify changes
          if ! grep -q "versionCode $VERSION_CODE" app/build.gradle || \
             ! grep -q "versionName \"$VERSION\"" app/build.gradle; then
            echo "Failed to update version in build.gradle"
            mv app/build.gradle.bak app/build.gradle
            exit 1
          fi

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Release APK
        working-directory: android
        run: |
          chmod +x gradlew
          ./gradlew clean assembleRelease --no-daemon

      - name: Verify APK
        working-directory: android
        run: |
          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "APK not found at $APK_PATH"
            exit 1
          fi
          
          # Verify APK size
          APK_SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH")
          if [ "$APK_SIZE" -lt 1000000 ]; then  # 1MB minimum size check
            echo "APK size is suspiciously small: $APK_SIZE bytes"
            exit 1
          fi

      - name: Generate Release Notes
        run: |
          {
            echo "# Release v${{ steps.get_version.outputs.version }}"
            echo ""
            echo "Version Code: ${{ steps.get_version.outputs.version_code }}"
            echo "Commit: ${{ steps.get_version.outputs.commit_hash }}"
            echo ""
            echo "## Changes since last release"
            echo ""
            git log $(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)..HEAD --pretty=format:"* %s" || echo "* Initial release"
          } > RELEASE_NOTES.md

      - name: Create Git Tag
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: android/app/build/outputs/apk/release/app-release.apk
          name: Release v${{ steps.get_version.outputs.version }}
          tag_name: v${{ steps.get_version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_TOKEN }}

      - name: Rename and Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-v${{ steps.get_version.outputs.version }}
          path: |
            android/app/build/outputs/apk/release/app-release.apk
            RELEASE_NOTES.md
          retention-days: 300

      - name: Notify on Success
        if: success()
        run: |
          echo "::notice::Successfully built and released version v${{ steps.get_version.outputs.version }}"

      - name: Cleanup
        if: always()
        run: |
          rm -rf ~/.gradle/caches/
          yarn cache clean
